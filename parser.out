Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> operacion empty
Rule 2     statement -> operacion statement
Rule 3     operacion -> suma
Rule 4     operacion -> multiplicacion
Rule 5     suma -> TOKEN EQUALS NUMBER PLUS NUMBER
Rule 6     suma -> TOKEN EQUALS CHARACTER PLUS NUMBER
Rule 7     suma -> TOKEN EQUALS NUMBER PLUS CHARACTER
Rule 8     suma -> TOKEN EQUALS CHARACTER PLUS CHARACTER
Rule 9     multiplicacion -> TOKEN EQUALS NUMBER TIMES NUMBER
Rule 10    multiplicacion -> TOKEN EQUALS CHARACTER TIMES NUMBER
Rule 11    multiplicacion -> TOKEN EQUALS NUMBER TIMES CHARACTER
Rule 12    multiplicacion -> TOKEN EQUALS CHARACTER TIMES CHARACTER
Rule 13    empty -> <empty>

Terminals, with rules where they appear

CHARACTER            : 6 7 8 8 10 11 12 12
EQUALS               : 5 6 7 8 9 10 11 12
NUMBER               : 5 5 6 7 9 9 10 11
PLUS                 : 5 6 7 8
TIMES                : 9 10 11 12
TOKEN                : 5 6 7 8 9 10 11 12
error                : 

Nonterminals, with rules where they appear

empty                : 1
multiplicacion       : 4
operacion            : 1 2
statement            : 2 0
suma                 : 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . operacion empty
    (2) statement -> . operacion statement
    (3) operacion -> . suma
    (4) operacion -> . multiplicacion
    (5) suma -> . TOKEN EQUALS NUMBER PLUS NUMBER
    (6) suma -> . TOKEN EQUALS CHARACTER PLUS NUMBER
    (7) suma -> . TOKEN EQUALS NUMBER PLUS CHARACTER
    (8) suma -> . TOKEN EQUALS CHARACTER PLUS CHARACTER
    (9) multiplicacion -> . TOKEN EQUALS NUMBER TIMES NUMBER
    (10) multiplicacion -> . TOKEN EQUALS CHARACTER TIMES NUMBER
    (11) multiplicacion -> . TOKEN EQUALS NUMBER TIMES CHARACTER
    (12) multiplicacion -> . TOKEN EQUALS CHARACTER TIMES CHARACTER

    TOKEN           shift and go to state 5

    statement                      shift and go to state 1
    operacion                      shift and go to state 2
    suma                           shift and go to state 3
    multiplicacion                 shift and go to state 4

state 1

    (0) S' -> statement .



state 2

    (1) statement -> operacion . empty
    (2) statement -> operacion . statement
    (13) empty -> .
    (1) statement -> . operacion empty
    (2) statement -> . operacion statement
    (3) operacion -> . suma
    (4) operacion -> . multiplicacion
    (5) suma -> . TOKEN EQUALS NUMBER PLUS NUMBER
    (6) suma -> . TOKEN EQUALS CHARACTER PLUS NUMBER
    (7) suma -> . TOKEN EQUALS NUMBER PLUS CHARACTER
    (8) suma -> . TOKEN EQUALS CHARACTER PLUS CHARACTER
    (9) multiplicacion -> . TOKEN EQUALS NUMBER TIMES NUMBER
    (10) multiplicacion -> . TOKEN EQUALS CHARACTER TIMES NUMBER
    (11) multiplicacion -> . TOKEN EQUALS NUMBER TIMES CHARACTER
    (12) multiplicacion -> . TOKEN EQUALS CHARACTER TIMES CHARACTER

    $end            reduce using rule 13 (empty -> .)
    TOKEN           shift and go to state 5

    operacion                      shift and go to state 2
    empty                          shift and go to state 6
    statement                      shift and go to state 7
    suma                           shift and go to state 3
    multiplicacion                 shift and go to state 4

state 3

    (3) operacion -> suma .

    TOKEN           reduce using rule 3 (operacion -> suma .)
    $end            reduce using rule 3 (operacion -> suma .)


state 4

    (4) operacion -> multiplicacion .

    TOKEN           reduce using rule 4 (operacion -> multiplicacion .)
    $end            reduce using rule 4 (operacion -> multiplicacion .)


state 5

    (5) suma -> TOKEN . EQUALS NUMBER PLUS NUMBER
    (6) suma -> TOKEN . EQUALS CHARACTER PLUS NUMBER
    (7) suma -> TOKEN . EQUALS NUMBER PLUS CHARACTER
    (8) suma -> TOKEN . EQUALS CHARACTER PLUS CHARACTER
    (9) multiplicacion -> TOKEN . EQUALS NUMBER TIMES NUMBER
    (10) multiplicacion -> TOKEN . EQUALS CHARACTER TIMES NUMBER
    (11) multiplicacion -> TOKEN . EQUALS NUMBER TIMES CHARACTER
    (12) multiplicacion -> TOKEN . EQUALS CHARACTER TIMES CHARACTER

    EQUALS          shift and go to state 8


state 6

    (1) statement -> operacion empty .

    $end            reduce using rule 1 (statement -> operacion empty .)


state 7

    (2) statement -> operacion statement .

    $end            reduce using rule 2 (statement -> operacion statement .)


state 8

    (5) suma -> TOKEN EQUALS . NUMBER PLUS NUMBER
    (6) suma -> TOKEN EQUALS . CHARACTER PLUS NUMBER
    (7) suma -> TOKEN EQUALS . NUMBER PLUS CHARACTER
    (8) suma -> TOKEN EQUALS . CHARACTER PLUS CHARACTER
    (9) multiplicacion -> TOKEN EQUALS . NUMBER TIMES NUMBER
    (10) multiplicacion -> TOKEN EQUALS . CHARACTER TIMES NUMBER
    (11) multiplicacion -> TOKEN EQUALS . NUMBER TIMES CHARACTER
    (12) multiplicacion -> TOKEN EQUALS . CHARACTER TIMES CHARACTER

    NUMBER          shift and go to state 9
    CHARACTER       shift and go to state 10


state 9

    (5) suma -> TOKEN EQUALS NUMBER . PLUS NUMBER
    (7) suma -> TOKEN EQUALS NUMBER . PLUS CHARACTER
    (9) multiplicacion -> TOKEN EQUALS NUMBER . TIMES NUMBER
    (11) multiplicacion -> TOKEN EQUALS NUMBER . TIMES CHARACTER

    PLUS            shift and go to state 11
    TIMES           shift and go to state 12


state 10

    (6) suma -> TOKEN EQUALS CHARACTER . PLUS NUMBER
    (8) suma -> TOKEN EQUALS CHARACTER . PLUS CHARACTER
    (10) multiplicacion -> TOKEN EQUALS CHARACTER . TIMES NUMBER
    (12) multiplicacion -> TOKEN EQUALS CHARACTER . TIMES CHARACTER

    PLUS            shift and go to state 13
    TIMES           shift and go to state 14


state 11

    (5) suma -> TOKEN EQUALS NUMBER PLUS . NUMBER
    (7) suma -> TOKEN EQUALS NUMBER PLUS . CHARACTER

    NUMBER          shift and go to state 15
    CHARACTER       shift and go to state 16


state 12

    (9) multiplicacion -> TOKEN EQUALS NUMBER TIMES . NUMBER
    (11) multiplicacion -> TOKEN EQUALS NUMBER TIMES . CHARACTER

    NUMBER          shift and go to state 17
    CHARACTER       shift and go to state 18


state 13

    (6) suma -> TOKEN EQUALS CHARACTER PLUS . NUMBER
    (8) suma -> TOKEN EQUALS CHARACTER PLUS . CHARACTER

    NUMBER          shift and go to state 20
    CHARACTER       shift and go to state 19


state 14

    (10) multiplicacion -> TOKEN EQUALS CHARACTER TIMES . NUMBER
    (12) multiplicacion -> TOKEN EQUALS CHARACTER TIMES . CHARACTER

    NUMBER          shift and go to state 22
    CHARACTER       shift and go to state 21


state 15

    (5) suma -> TOKEN EQUALS NUMBER PLUS NUMBER .

    TOKEN           reduce using rule 5 (suma -> TOKEN EQUALS NUMBER PLUS NUMBER .)
    $end            reduce using rule 5 (suma -> TOKEN EQUALS NUMBER PLUS NUMBER .)


state 16

    (7) suma -> TOKEN EQUALS NUMBER PLUS CHARACTER .

    TOKEN           reduce using rule 7 (suma -> TOKEN EQUALS NUMBER PLUS CHARACTER .)
    $end            reduce using rule 7 (suma -> TOKEN EQUALS NUMBER PLUS CHARACTER .)


state 17

    (9) multiplicacion -> TOKEN EQUALS NUMBER TIMES NUMBER .

    TOKEN           reduce using rule 9 (multiplicacion -> TOKEN EQUALS NUMBER TIMES NUMBER .)
    $end            reduce using rule 9 (multiplicacion -> TOKEN EQUALS NUMBER TIMES NUMBER .)


state 18

    (11) multiplicacion -> TOKEN EQUALS NUMBER TIMES CHARACTER .

    TOKEN           reduce using rule 11 (multiplicacion -> TOKEN EQUALS NUMBER TIMES CHARACTER .)
    $end            reduce using rule 11 (multiplicacion -> TOKEN EQUALS NUMBER TIMES CHARACTER .)


state 19

    (8) suma -> TOKEN EQUALS CHARACTER PLUS CHARACTER .

    TOKEN           reduce using rule 8 (suma -> TOKEN EQUALS CHARACTER PLUS CHARACTER .)
    $end            reduce using rule 8 (suma -> TOKEN EQUALS CHARACTER PLUS CHARACTER .)


state 20

    (6) suma -> TOKEN EQUALS CHARACTER PLUS NUMBER .

    TOKEN           reduce using rule 6 (suma -> TOKEN EQUALS CHARACTER PLUS NUMBER .)
    $end            reduce using rule 6 (suma -> TOKEN EQUALS CHARACTER PLUS NUMBER .)


state 21

    (12) multiplicacion -> TOKEN EQUALS CHARACTER TIMES CHARACTER .

    TOKEN           reduce using rule 12 (multiplicacion -> TOKEN EQUALS CHARACTER TIMES CHARACTER .)
    $end            reduce using rule 12 (multiplicacion -> TOKEN EQUALS CHARACTER TIMES CHARACTER .)


state 22

    (10) multiplicacion -> TOKEN EQUALS CHARACTER TIMES NUMBER .

    TOKEN           reduce using rule 10 (multiplicacion -> TOKEN EQUALS CHARACTER TIMES NUMBER .)
    $end            reduce using rule 10 (multiplicacion -> TOKEN EQUALS CHARACTER TIMES NUMBER .)

